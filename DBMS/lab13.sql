-----------------------Part – A:


--1. List all books with their authors. 
   SELECT BOOK.TITLE, AUTHOR.AUTHORNAME
   FROM BOOK
   INNER JOIN AUTHOR ON BOOK.AUTHORID = AUTHOR.AUTHORID;

--2. List all books with their publishers. 
   SELECT BOOK.TITLE, PUBLISHER.PUBLISHERNAME
   FROM BOOK
   INNER JOIN PUBLISHER ON BOOK.PUBLISHERID = PUBLISHER.PUBLISHERID;

--3. List all books with their authors and publishers. 
   SELECT BOOK.TITLE, AUTHOR.AUTHORNAME, PUBLISHER.PUBLISHERNAME
   FROM BOOK
   INNER JOIN AUTHOR ON BOOK.AUTHORID = AUTHOR.AUTHORID
   INNER JOIN PUBLISHER ON BOOK.PUBLISHERID = PUBLISHER.PUBLISHERID;

--4. List all books published after 2010 with their authors and publisher and price.
   SELECT BOOK.TITLE, AUTHOR.AUTHORNAME, PUBLISHER.PUBLISHERNAME, BOOK.PRICE
   FROM BOOK
   INNER JOIN AUTHOR ON BOOK.AUTHORID = AUTHOR.AUTHORID
   INNER JOIN PUBLISHER ON BOOK.PUBLISHERID = PUBLISHER.PUBLISHERID
   WHERE BOOK.PUBLICATIONYEAR > 2010;

--5. List all authors and the number of books they have written.
   SELECT AUTHOR.AUTHORNAME, COUNT(BOOK.BOOKID) AS TOTALBOOKS
   FROM AUTHOR
   LEFT JOIN BOOK ON AUTHOR.AUTHORID = BOOK.AUTHORID
   GROUP BY AUTHOR.AUTHORNAME;

--6. List all publishers and the total price of books they have published.
   SELECT PUBLISHER.PUBLISHERNAME, SUM(BOOK.PRICE) AS TOTALPRICE
   FROM PUBLISHER
   LEFT JOIN BOOK ON PUBLISHER.PUBLISHERID = BOOK.PUBLISHERID
   GROUP BY PUBLISHER.PUBLISHERNAME;

--7. List authors who have not written any books. 
   SELECT AUTHOR.AUTHORNAME
   FROM AUTHOR
   LEFT JOIN BOOK ON AUTHOR.AUTHORID = BOOK.AUTHORID
   WHERE BOOK.BOOKID IS NULL;

--8. Display total number of Books and Average Price of every Author. 
   SELECT AUTHOR.AUTHORNAME, COUNT(BOOK.BOOKID) AS TOTALBOOKS, AVG(BOOK.PRICE) AS AVERAGEPRICE
   FROM AUTHOR
   LEFT JOIN BOOK ON AUTHOR.AUTHORID = BOOK.AUTHORID
   GROUP BY AUTHOR.AUTHORNAME;

--9. lists each publisher along with the total number of books they have published, sorted from highest to lowest. 
   SELECT PUBLISHER.PUBLISHERNAME, COUNT(BOOK.BOOKID) AS TOTALBOOKS
   FROM PUBLISHER
   LEFT JOIN BOOK ON PUBLISHER.PUBLISHERID = BOOK.PUBLISHERID
   GROUP BY PUBLISHER.PUBLISHERNAME
   ORDER BY TOTALBOOKS DESC;

--10. Display number of books published each year. 
    SELECT BOOK.PUBLICATIONYEAR, COUNT(BOOK.BOOKID) AS TOTALBOOKS
    FROM BOOK
    GROUP BY BOOK.PUBLICATIONYEAR;

 
--Part – B: 

--1. List the publishers whose total book prices exceed 500, ordered by the total price.
   SELECT PUBLISHER.PUBLISHERNAME, SUM(BOOK.PRICE) AS TOTALPRICE
   FROM PUBLISHER
   INNER JOIN BOOK ON PUBLISHER.PUBLISHERID = BOOK.PUBLISHERID
   GROUP BY PUBLISHER.PUBLISHERNAME
   HAVING SUM(BOOK.PRICE) > 500
   ORDER BY TOTALPRICE DESC;

--2. List most expensive book for each author, sort it with the highest price. 
    SELECT AUTHOR.AUTHORNAME, BOOK.TITLE, BOOK.PRICE
   FROM AUTHOR
   INNER JOIN BOOK ON AUTHOR.AUTHORID = BOOK.AUTHORID
   WHERE BOOK.PRICE = (
       SELECT MAX(B2.PRICE)
       FROM BOOK B2
       WHERE B2.AUTHORID = AUTHOR.AUTHORID
   )
   ORDER BY BOOK.PRICE DESC;
 
--Part – C: Create table as per following schema with proper validation and try to insert data which violate your 
--validation. 

--1. Emp_info(Eid, Ename, Did, Cid, Salary, Experience) 
--Dept_info(Did, Dname) 
--City_info(Cid, Cname, Did)) 
--District(Did, Dname, Sid) 
--State(Sid, Sname, Cid) 
--Country(Cid, Cname) 

CREATE TABLE COUNTRY (
    CID INT PRIMARY KEY,
    CNAME VARCHAR(50) NOT NULL
);

CREATE TABLE STATE (
    SID INT PRIMARY KEY,
    SNAME VARCHAR(50) NOT NULL,
    CID INT,
    FOREIGN KEY (CID) REFERENCES COUNTRY(CID)
);

CREATE TABLE DISTRICT (
    DID INT PRIMARY KEY,
    DNAME VARCHAR(50) NOT NULL,
    SID INT,
    FOREIGN KEY (SID) REFERENCES STATE(SID)
);

CREATE TABLE DEPT_INFO (
    DID INT PRIMARY KEY,
    DNAME VARCHAR(50) NOT NULL
);

CREATE TABLE CITY_INFO (
    CID INT PRIMARY KEY,
    CNAME VARCHAR(50) NOT NULL,
    DID INT,
    FOREIGN KEY (DID) REFERENCES DISTRICT(DID)
);

CREATE TABLE EMP_INFO (
    EID INT PRIMARY KEY,
    ENAME VARCHAR(100) NOT NULL,
    DID INT,
    CID INT,
    SALARY DECIMAL(10,2) CHECK (SALARY > 0),
    EXPERIENCE INT CHECK (EXPERIENCE >= 0),
    FOREIGN KEY (DID) REFERENCES DEPT_INFO(DID),
    FOREIGN KEY (CID) REFERENCES CITY_INFO(CID)
);


--2. Insert 5 records in each table. 
-- COUNTRY
INSERT INTO COUNTRY VALUES 
(1,'INDIA'),
(2,'USA'),
(3,'UK'),
(4,'CANADA'),
(5,'AUSTRALIA');

-- STATE
INSERT INTO STATE VALUES 
(1,'GUJARAT',1),
(2,'DELHI',1),
(3,'CALIFORNIA',2),
(4,'LONDON',3),
(5,'ONTARIO',4);

-- DISTRICT
INSERT INTO DISTRICT VALUES 
(1,'AHMEDABAD',1),
(2,'NEW DELHI',2),
(3,'LOS ANGELES',3),
(4,'WESTMINSTER',4),
(5,'TORONTO',5);

-- DEPT_INFO
INSERT INTO DEPT_INFO VALUES 
(1,'HR'),
(2,'SALES'),
(3,'IT'),
(4,'FINANCE'),
(5,'MARKETING');

-- CITY_INFO
INSERT INTO CITY_INFO VALUES 
(1,'SATELLITE',1),
(2,'CONNAUGHT PLACE',2),
(3,'HOLLYWOOD',3),
(4,'SOHO',4),
(5,'DOWNTOWN',5);

-- EMP_INFO
INSERT INTO EMP_INFO VALUES 
(1,'RAHUL SHAH',1,1,45000,5),
(2,'PRIYA SINGH',3,2,60000,7),
(3,'JOHN DOE',2,3,75000,10),
(4,'EMILY CLARK',4,4,50000,6),
(5,'AMIT PATEL',5,5,55000,4);


--3. Display employeename, departmentname, Salary, Experience, City, District, State and country of all 
--employees. 
SELECT EMP_INFO.ENAME, DEPT_INFO.DNAME, EMP_INFO.SALARY, EMP_INFO.EXPERIENCE,
       CITY_INFO.CNAME AS CITY, DISTRICT.DNAME AS DISTRICT, STATE.SNAME AS STATE, COUNTRY.CNAME AS COUNTRY
FROM EMP_INFO
INNER JOIN DEPT_INFO ON EMP_INFO.DID = DEPT_INFO.DID
INNER JOIN CITY_INFO ON EMP_INFO.CID = CITY_INFO.CID
INNER JOIN DISTRICT ON CITY_INFO.DID = DISTRICT.DID
INNER JOIN STATE ON DISTRICT.SID = STATE.SID
INNER JOIN COUNTRY ON STATE.CID = COUNTRY.CID;
